//
//  RootTableViewControllerPresenter.swift
//  TestWeather
//
//  Created Алла Даминова on 15.07.2021.
//  Copyright © 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Edward
//

import Foundation

// MARK: View -
protocol RootTableViewControllerViewProtocol: class {
    func reloadView()
}

// MARK: Presenter -
protocol RootTableViewControllerPresenterProtocol: class {
    var view: RootTableViewControllerViewProtocol? { get set }
    var cites: [City]? { get set }
    init(view: RootTableViewControllerViewProtocol, networkService: NetworkServiceProtocol, router: RouterProtocol)
    func downloadCity()
    func numberOfRows() -> Int
    func currentWeatherCity(forIndexPath indexPath: IndexPath) -> WeatherModel?
    func deleteCity(city: WeatherModel)
    func addCity(city: WeatherModel)
}

class RootTableViewControllerPresenter: RootTableViewControllerPresenterProtocol {
    weak var view: RootTableViewControllerViewProtocol?
    var cites: [City]?
    private var weatherCites: [WeatherModel] = []
    var router: RouterProtocol?
    weak var networkService: NetworkServiceProtocol?
    
    required init(view: RootTableViewControllerViewProtocol, networkService: NetworkServiceProtocol, router: RouterProtocol) {
        self.view = view
        self.networkService = networkService
        self.router = router
        self.cites = City.getCites()
        self.weatherCites = []
        downloadCity()
    }
    
    func downloadCity() {
        guard let cites = cites else { return }
        for city in cites {
                self.networkService?.loadData(lat: city.lat, lon: city.lon) { (weather, error) in
                    if let error = error {
                        print(error)
                        return
                    }
                    guard let weather = weather else { return }
                    self.weatherCites.append(weather)
                }
            }
            self.view?.reloadView()
    }
    
    func currentWeatherCity(forIndexPath indexPath: IndexPath) -> WeatherModel? {
        let city = weatherCites[indexPath.row]
        return city
    }
    
    func numberOfRows() -> Int {
        return weatherCites.count
    }
    
    func tapOnTheCity(city: WeatherModel) {
        
    }
    
    func deleteCity(city: WeatherModel) {
        
    }
    
    func addCity(city: WeatherModel) {
        
    }
}
